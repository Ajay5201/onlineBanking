TRIGGER
CREATE OR REPLACE TRIGGER  TRIGG1
BEFORE INSERT ON ACCOUNT_INFO FOR EACH ROW
BEGIN
:new.ACC_NO := generate_acc_id();
END;

---TRANSACTION ID GENERATOR

CREATE OR REPLACE TRIGGER  TRIGG2
BEFORE INSERT ON TRANSACTION FOR EACH ROW
BEGIN
:NEW.TRX_ID := TRANSACTIONID_GENERATE();
END;
***************************************************************************
create or replace FUNCTION generate_acc_id
RETURN NUMBER
IS
ID NUMBER;
BEGIN
SELECT MAX(ACC_NO) INTO ID FROM ACCOUNT_INFO;
IF ID IS NULL THEN
  ID := TO_NUMBER('183100001');
ELSE
  ID := ID + 1;
END IF;
RETURN ID;
END;


create or replace FUNCTION TRANSACTIONID_GENERATE
RETURN NUMBER 
IS
ID number;
BEGIN
SELECT MAX(TRX_ID) INTO ID FROM TRANSACTION;
IF ID IS NULL THEN
ID := 19801;
ELSE 
ID := ID + 1;
END IF;
RETURN ID;
END;
*************************************************************************
create or replace PROCEDURE TRANSFER(sender IN NUMBER,receiver IN NUMBER, amount IN NUMBER)
IS
BEGIN
UPDATE ACCOUNT1 SET BALANCE = BALANCE - amount 
WHERE ACC_NO = sender;
UPDATE ACCOUNT1 SET BALANCE = BALANCE + amount
WHERE ACC_NO = receiver;
END;

create or replace PROCEDURE WITHDRAW(p_number NUMBER,p_amount NUMBER)
IS
amount number;
BEGIN
SELECT BALANCE INTO amount FROM ACCOUNT1
WHERE ACC_NO = p_number;
amount := amount - p_amount;
UPDATE ACCOUNT1 SET BALANCE = amount WHERE ACC_NO = p_number;
END;

create or replace PROCEDURE DEPOSIT(p_number NUMBER,p_amount NUMBER)
IS
amount number;
BEGIN
SELECT BALANCE INTO amount FROM ACCOUNT1
WHERE ACC_NO = p_number;
amount := amount + p_amount;
UPDATE ACCOUNT1 SET BALANCE = amount WHERE ACC_NO = p_number;
END;
